- I have to access the source list from the top to inside
- and the new list from inside to the top (don't know how to do that)

- [] refactor functions and list manipulations based on what I learned in too many linked lists
    - [x] implement iterators: https://rust-unofficial.github.io/too-many-lists/second-into-iter.html
    - [] reverse iterators (traverse):
        - https://javarevisited.blogspot.com/2017/03/how-to-reverse-linked-list-in-java-using-iteration-and-recursion.html
        - https://www.java67.com/2016/07/how-to-reverse-singly-linked-list-in-java-example.html
    - [x] implement peek: https://rust-unofficial.github.io/too-many-lists/second-peek.html

```
list {
    val: 5,
    next: Some(list {
        val: 4,
        next: ...
    })
}

mem::replace(&mut self.next, None)

result = list {
    val: 5,
    next: None
}

`Some(next_node)`
node = list {
    val: 4,
    next: ...
}
*self = *next_node

---

if list {
    val: 1,
    next: None
}

mem::replace(&mut self.next, None)

result = list {
    val: 1,
    next: None
}

```


- [x] rust "too many linked lists"
    - rust_study.ws/lists/README.md
- [x] watch videos about liked lists

```
func(level, node) -> node {
    if (  ) {

    } else {

    }
}

func(3, node_5) -> node_3;

// iterate over linked_list;

list {
    val: 5,
    next: list {
        val: 4,
        next: ...
    }
}


iterate(list_in, stop) {
    new_list = list::new();
    list = list_in.clone();
    loop {
        new_list = list;
    }
}


```
